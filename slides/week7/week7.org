#+TITLE: Week 7
#+AUTHOR: Josh Ting 
#+EMAIL: josh.ting@gatech.edu

* Data Structures
- Data structures are ways that computers store collections of data in memory
- Different data structures offer different advantages and disadvantages in terms of how data is grouped or how efficient it is to interact with the data

* Arrays
- You already have worked with arrays, which are the built in data structure for C++
- Elements of arrays are ordered and easily retrievable
- Arrays have a fixed size; maximum number of elements they can contain are determined when they are instantiated

* Lists
- A list is any data structure that is ordered
- Useful when relative ordering between elements is important
- There are various different implementations of lists in the C++ standard library

* Linked Lists
- Lists in which each data element is linked to the next element in the list
- The programmer has access to the list's "head" (the first element) and sometimes the "tail" (the last element)
- Disadvantages: retrieving elements in the middle of the list require starting at the head and then traversing the list until the desired element is found
- Advantages: easy to resize, easy to insert an element in between two elements
[[file:https://www.cs.usfca.edu/~srollins/courses/cs112-f08/web/notes/linkedlists/ll2.gif]]

* Stacks
- LIFO (last-in first-out) list with two key functions:
  - Push: Places an element on the stack
  - Pop: Removes the element most recently added to the stack

* Queues
- FIFO (first-in first-out) list with two key functions:
  - Push: Adds an element to the end of the queue
  - Pop: Removes the element at the front of the queue

* Sets
- A set is any data structure without duplicate elements
- Unlike lists, sets do not necessarily have order

* Maps
- A collection of (key, value) pairs
- The keys of a map form a set and are each associated with a specific value
- You can add new pairs to a map, as well as remove or modify existing pairs
- If you provide a map with a key, the map will return its value


* Trees
- A tree is like a linked list, except each element can point to multiple subsequent elements
- Nodes that a node points to are called its children
- A node that points to another node is called the other node's parent
- The top of the tree is called its root
- Nodes without children are called the leaves of the tree
[[file:https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/300px-Binary_tree.svg.png]]

* Templates